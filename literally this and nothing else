import pickle
import os
import time
MISTAKE_COUNT = 0
CHEM_FILE = "chemistry_apparatus.dat"
PHYSICS_FILE = "physics_apparatus.dat"
BIOLOGY_FILE = "biology_apparatus.dat"
def FILE_TYPE(FILE_NAME):
    LAB_TYPE="UNKNOWN"
    if FILE_NAME==CHEM_FILE:
        LAB_TYPE="CHEMISTRY"
    elif FILE_NAME==PHYSICS_FILE:
        LAB_TYPE="PHYSICS"
    elif FILE_NAME==BIOLOGY_FILE:
        LAB_TYPE="BIOLOGY"
    return LAB_TYPE
def opening_menu():
    print("\n" * 5)
    print("=" * 60)
    print("+" * 60)
    print("|" + " " * 58 + "|")
    print("|" + " " * 10 + "SANBIS LAB INVENTORY MANAGEMENT SYSTEM" + " " * 10 + "|")
    print("|" + " " * 58 + "|")
    print("+" * 60)
    print("=" * 60)
    print("\n" * 2)
def setup_initial_passwords():
    if not os.path.exists("Adminpassword.txt"):
        Admin_pass=open("Adminpassword.txt","w")
        Admin_pass.write("Admin")
        Admin_pass.close()
    if not os.path.exists("Userpassword.txt"):
        User_pass=open("Userpassword.txt","w")
        User_pass.write("User")
        User_pass.close()

def main():
    import pickle
    import os
    setup_initial_passwords()
    while True:
        x=password()
        if x.lower()=="admin":
            lab_selection("admin")
        elif x.lower()=="user":
            lab_selection("user")
        else:
            print("\n--- AUTHENTICATION FAILED ---\n")

def lab_selection(role):
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 10 + "LAB SELECTION MENU" + " " * 10 + "*")
        print("*" * 40)
        print("1. Chemistry Lab")
        print("2. Physics Lab")
        print("3. Biology Lab")
        print("4. Log out")
        print("-" * 40)
        choice = input("Enter your choice (1-4): ")
        
        if choice == '1':
            if role == "admin":
                Admin_menu_chemistry()
            else:
                User_menu_chemistry()
        elif choice == '2':
            if role == "admin":
                Admin_menu_physics()
            else:
                User_menu_physics()
        elif choice == '3':
            if role == "admin":
                Admin_menu_biology()
            else:
                User_menu_biology()
        elif choice == '4':
            print("\n" + "=" * 40)
            print("Successfully logged out. Goodbye!")
            print("=" * 40)
            break
        else:
            print("\n" + "!" * 40)
            print("Invalid choice. Please select 1, 2, 3, or 4.")
            print("!" * 40)

def User_menu_chemistry():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 6 + "CHEMISTRY USER MENU" + " " * 14 + "*")
        print("*" * 40)
        print("1. Display All Records")
        print("2. Search Record by Name")
        print("3. Check Restock Warnings")
        print("4. Update Quantity Only")
        print("5. Change Password")
        print("6. Sort Records by Name")
        print("7. Exit")
        print("-" * 40)
        ch=input("Enter your choice (1-7): ")
        if ch=='1':
            display_apparatus(CHEM_FILE)
        elif ch=='2':
            search_apparatus(CHEM_FILE)
        elif ch=='3':
            check_restock(CHEM_FILE)
        elif ch=='4':
            update_Quantity(CHEM_FILE)
        elif ch=='5':
            change_password()
        elif ch=='6':
            sort_apparatus(CHEM_FILE)
        elif ch=='7':
            break
        else:
            print("\n-- Invalid Menu Choice --")
            
def Admin_menu_chemistry():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 6 + "CHEMISTRY ADMIN MENU" + " " * 13 + "*")
        print("*" * 40)
        print(" 1. Add New Records")
        print(" 2. Display All Records")
        print(" 3. Search Record by Name")
        print(" 4. Update Quantity Only")
        print(" 5. Delete Record")
        print(" 6. Append Records")
        print(" 7. Update All Record Details")
        print(" 8. List All Chemicals")
        print(" 9. Check Restock Warnings")
        print("10. Sort Records by Name")
        print("11. Change Password")
        print("12. Log out / Exit")
        print("-" * 40)
        choice =input("Enter choice (1-12): ")
        if choice == "1":
            add_apparatus(CHEM_FILE)
        elif choice == "2":
            display_apparatus(CHEM_FILE)
        elif choice == "3":
            search_apparatus(CHEM_FILE)
        elif choice == "4":
            update_Quantity(CHEM_FILE)
        elif choice == "5":
            delete_apparatus(CHEM_FILE)
        elif choice == "6":
            append_apparatus(CHEM_FILE)
        elif choice == "7":
            update_apparatus(CHEM_FILE)
        elif choice == "8":
            list_chemicals(CHEM_FILE)
        elif choice == "9":
            check_restock(CHEM_FILE)
        elif choice == "10":
            sort_apparatus(CHEM_FILE)
        elif choice == "11":
            change_password()
        elif choice== '12':
            break
        else:
            print("\n-- Invalid Menu Choice --")

def User_menu_physics():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 8 + "PHYSICS USER MENU" + " " * 15 + "*")
        print("*" * 40)
        print("1. Display All Records")
        print("2. Search Record by Name")
        print("3. Check Restock Warnings")
        print("4. Update Quantity Only")
        print("5. Change Password")
        print("6. Sort Records by Name")
        print("7. Exit")
        print("-" * 40)
        ch=input("Enter your choice (1-7): ")
        if ch=='1':
            display_apparatus(PHYSICS_FILE)
        elif ch=='2':
            search_apparatus(PHYSICS_FILE)
        elif ch=='3':
            check_restock(PHYSICS_FILE)
        elif ch=='4':
            update_Quantity(PHYSICS_FILE)
        elif ch=='5':
            change_password()
        elif ch=='6':
            sort_apparatus(PHYSICS_FILE)
        elif ch=='7':
            break
        else:
            print("\n-- Invalid Menu Choice --")

def Admin_menu_physics():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 7 + "PHYSICS ADMIN MENU" + " " * 14 + "*")
        print("*" * 40)
        print(" 1. Add New Records")
        print(" 2. Display All Records")
        print(" 3. Search Record by Name")
        print(" 4. Update Quantity Only")
        print(" 5. Delete Record")
        print(" 6. Append Records")
        print(" 7. Update All Record Details")
        print(" 8. Check Restock Warnings")
        print(" 9. Sort Records by Name")
        print("10. Change Password")
        print("11. Log out / Exit")
        print("-" * 40)
        choice =input("Enter choice (1-11): ")
        if choice == "1":
            add_apparatus(PHYSICS_FILE)
        elif choice == "2":
            display_apparatus(PHYSICS_FILE)
        elif choice == "3":
            search_apparatus(PHYSICS_FILE)
        elif choice == "4":
            update_Quantity(PHYSICS_FILE)
        elif choice == "5":
            delete_apparatus(PHYSICS_FILE)
        elif choice == "6":
            append_apparatus(PHYSICS_FILE)
        elif choice == "7":
            update_apparatus(PHYSICS_FILE)
        elif choice == "8":
            check_restock(PHYSICS_FILE)
        elif choice == "9":
            sort_apparatus(PHYSICS_FILE)
        elif choice == "10":
            change_password()
        elif choice== '11':
            break
        else:
            print("\n-- Invalid Menu Choice --")
def User_menu_biology():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 7 + "BIOLOGY USER MENU" + " " * 15 + "*")
        print("*" * 40)
        print("1. Display All Records")
        print("2. Search Record by Name")
        print("3. Check Restock Warnings")
        print("4. Update Quantity Only")
        print("5. Change Password")
        print("6. Sort Records by Name")
        print("7. Exit")
        print("-" * 40)
        ch=input("Enter your choice (1-7): ")
        if ch=='1':
            display_apparatus(BIOLOGY_FILE)
        elif ch=='2':
            search_apparatus(BIOLOGY_FILE)
        elif ch=='3':
            check_restock(BIOLOGY_FILE)
        elif ch=='4':
            update_Quantity(BIOLOGY_FILE)
        elif ch=='5':
            change_password()
        elif ch=='6':
            sort_apparatus(BIOLOGY_FILE)
        elif ch=='7':
            break
        else:
            print("\n-- Invalid Menu Choice --")
def Admin_menu_biology():
    while True:
        print("\n" + "*" * 40)
        print("*" + " " * 7 + "BIOLOGY ADMIN MENU" + " " * 14 + "*")
        print("*" * 40)
        print(" 1. Add New Records")
        print(" 2. Display All Records")
        print(" 3. Search Record by Name")
        print(" 4. Update Quantity Only")
        print(" 5. Delete Record")
        print(" 6. Append Records")
        print(" 7. Update All Record Details")
        print(" 8. List All Chemicals")
        print(" 9. List All Specimens")
        print("10. Check Restock Warnings")
        print("11. Sort Records by Name")
        print("12. Change Password")
        print("13. Log out / Exit")
        print("-" * 40)
        choice =input("Enter choice (1-12): ")
        if choice == "1":
            add_apparatus(BIOLOGY_FILE)
        elif choice == "2":
            display_apparatus(BIOLOGY_FILE)
        elif choice == "3":
            search_apparatus(BIOLOGY_FILE)
        elif choice == "4":
            update_Quantity(BIOLOGY_FILE)
        elif choice == "5":
            delete_apparatus(BIOLOGY_FILE)
        elif choice == "6":
            append_apparatus(BIOLOGY_FILE)
        elif choice == "7":
            update_apparatus(BIOLOGY_FILE)
        elif choice == "8":
            list_chemicals(BIOLOGY_FILE)
        elif choice == "9":
            list_Specimens(BIOLOGY_FILE)
        elif choice == "10":
            check_restock(BIOLOGY_FILE)
        elif choice == "11":
            sort_apparatus(BIOLOGY_FILE)
        elif choice == "12":
            change_password()
        elif choice== '13':
            break
        else:
            print("\n-- Invalid Menu Choice --")
            
def add_apparatus(FILE):
    l=[]
    f=open(FILE,"wb")
    print("\n--- ADD APPARATUS ---")
    while True:
        try:
            n=int(input("Enter the number records to be added: "))
            break
        except ValueError:
            print("!! Invalid input. Please enter a whole number. !!")
            
    for i in range(n):
        print("\n--- Record {} ---".format(i+1))
        name=input("Enter the name of the apparatus: ")
        Type=input("Enter type (equipment/chemical/specimen): ")
        
        while True:
            try:
                Quantity=int(input("Enter the quantity: "))
                break
            except ValueError:
                print("!! Invalid input. Please enter a whole number for quantity. !!")
                
        Date=input("Enter the date of purchase (dd/mm/yyyy): ")
        
        while True:
            try:
                Threshold=int(input("Enter the restock Threshold: "))
                break
            except ValueError:
                print("!! Invalid input. Please enter a whole number for threshold. !!")
                
        print("-" * 25)
        l=[name,Type,Quantity,Date,Threshold]
        pickle.dump(l,f)
    f.close()
    print("\n--- Records added successfully! ---")

def display_apparatus(FILE):
    Lab_Type=FILE_TYPE(FILE)
    f=open(FILE,'rb')
    print("\n" + "=" * 80)
    print(" " * 28 + f"{Lab_Type} APPARATUS RECORDS")
    print("=" * 80)
    print("NAME","\t", "TYPE","\t", "QTY","\t", "DATE","\t", "THRESHOLD")
    print("-" * 80)
    try:
        while True:
            l=pickle.load(f)
            print(l[0],"\t", l[1],"\t", l[2],"\t", l[3],"\t", l[4])
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        f.close()
    print("=" * 80 + "\n")

def search_apparatus(FILE):
    Lab_Type=FILE_TYPE(FILE)
    f=open(FILE,'rb')
    r=input("\nEnter the name of apparatus to be searched: ")
    flag=0
    print("\n--- SEARCH RESULTS ---")
    try:
        while True:
            l=pickle.load(f)
            if r.lower()==l[0].lower():
                print("=" * 60)
                print("NAME","\t", "TYPE","\t", "QTY","\t", "DATE","\t", "THRESHOLD")
                print("-" * 60)
                print(l[0],"\t", l[1],"\t", l[2],"\t", l[3],"\t", l[4])
                print("=" * 60)
                flag=1
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        f.close()
        if flag==0:
            print(f"Apparatus '{}' not found in the {Lab_Type.capitalize()} records.".format(r))
        print("----------------------\n")


def update_Quantity(FILE):
    Lab_Type=FILE_TYPE(FILE)
    fr=open(FILE,"rb")
    fw=open("temp.dat","wb")
    flag=0
    r=input("Enter the apparatus name to modify Quantity: ")
    try:
        while True:
            d=pickle.load(fr)
            if d[0].lower()==r.lower():
                print("\n--- Current Quantity: {} ---".format(d[2]))
                while True:
                    try:
                        d[2]=int(input("Enter NEW Quantity: "))
                        break
                    except ValueError:
                        print("!! Invalid input. Please enter a whole number. !!")
                flag=1
            pickle.dump(d,fw)
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        fr.close()
        fw.close()
        if flag==1:
            print("\n--- Quantity for '{}' successfully modified! ---".format(r))
            os.remove(FILE)
            os.rename("temp.dat",FILE)
        else:
            print("\n--- Apparatus '{}' not found. ---".format(r))


def update_apparatus(FILE):
    Lab_Type=FILE_TYPE(FILE)
    fr=open(FILE,"rb")
    fw=open("temp.dat","wb")
    flag=0
    r=input("Enter the apparatus name to modify ALL DETAILS: ")
    try:
        while True:
            d=pickle.load(fr)
            if d[0].lower()==r.lower():
                print("\n--- Updating Record for '{}' ---".format(r))
                while True:
                    try:
                        d[2]=int(input("Enter NEW Quantity (Current: {}): ".format(d[2])))
                        break
                    except ValueError:
                        print("!! Invalid input. Please enter a whole number. !!")
                        
                d[3]=input("Enter NEW Date (Current: {}): ".format(d[3]))
                
                while True:
                    try:
                        d[4]=int(input("Enter NEW Threshold (Current: {}): ".format(d[4])))
                        break
                    except ValueError:
                        print("!! Invalid input. Please enter a whole number. !!")
                flag=1
            pickle.dump(d,fw)
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        fr.close()
        fw.close()
        if flag==1:
            print("\n--- Record for '{}' successfully modified! ---".format(r))
            os.remove(FILE)
            os.rename("temp.dat",FILE)
        else:
            print("\n--- Apparatus '{}' not found. ---".format(r))

def delete_apparatus(FILE):
    fr=open(FILE,"rb")
    fw=open("temp.dat","wb")
    flag=0
    r=input("Enter the apparatus name to DELETE: ")
    try:
        while True:
            d=pickle.load(fr)
            if d[0].lower()==r.lower():
                flag=1
                print("--- Apparatus '{}' found and marked for deletion. ---".format(r))
            else:
                pickle.dump(d,fw)
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        fr.close()
        fw.close()
        if flag==1:
            print("\n--- Record for '{}' successfully deleted! ---".format(r))
            os.remove(FILE)
            os.rename("temp.dat",FILE)
        else:
            print("\n--- Apparatus '{}' not found. No records deleted. ---".format(r))


def append_apparatus(FILE):
    l=[]
    Lab_Type=FILE_TYPE(FILE)
    f=open(FILE,"ab")
    print(f"\n--- APPEND {Lab_Type} APPARATUS ---")
    while True:
        try:
            n=int(input("Enter the number records to be appended: "))
            break
        except ValueError:
            print("!! Invalid input. Please enter a whole number. !!")
            
    for i in range(n):
        print("\n--- New Record {} ---".format(i+1))
        name=input("Enter the name of the apparatus: ")
        Type=input("Enter type (equipment/chemical/specimen): ")
        
        while True:
            try:
                Quantity=int(input("Enter the quantity: "))
                break
            except ValueError:
                print("!! Invalid input. Please enter a whole number for quantity. !!")
                
        Date=input("Enter the date of purchase (dd/mm/yyyy): ")
        
        while True:
            try:
                Threshold=int(input("Enter the restock Threshold: "))
                break
            except ValueError:
                print("!! Invalid input. Please enter a whole number for threshold. !!")
                
        print("-" * 25)
        l=[name,Type,Quantity,Date,Threshold]
        pickle.dump(l,f)
    f.close()
    print("\n--- Records appended successfully! ---")

def list_chemicals(FILE):
    f=open(FILE,'rb')
    flag=0
    print("\n" + "=" * 60)
    print(" " * 18 + "LIST OF CHEMICALS")
    print("=" * 60)
    try:
        while True:
            l=pickle.load(f)
            if "chemical"==l[1].lower():
                print(l[0],"\t", l[2],"\t", l[3],"\t", unit(l[1]))
                flag=1
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        f.close()
        print("-" * 60)
        if flag==0:
            print("No chemicals found in the database.")
        else:
            print("Total chemicals listed above.")
        print("=" * 60 + "\n")
def list_Specimens(FILE):
    f=open(FILE,'rb')
    flag=0
    print("\n" + "=" * 60)
    print(" " * 18 + "LIST OF SPECIMENS")
    print("=" * 60)
    try:
        while True:
            l=pickle.load(f)
            if "specimen"==l[1].lower():
                print(l[0],"\t", l[2],"\t", l[3],"\t", unit(l[1]))
                flag=1
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        f.close()
        print("-" * 60)
        if flag==0:
            print("No specimen found in the database.")
        else:
            print("Total specimens listed above.")
        print("=" * 60 + "\n")            
def sort_apparatus(FILE):
    Lab_Type=FILE_TYPE(FILE)
    f1=open(FILE,"rb")
    fw=open("temp.dat","wb")
    name_list=[]
    try:
        while True:
            l=pickle.load(f1)
            name_list.append(l[0])
    except FileNotFoundError:
        print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
    except EOFError:
        f1.close()
    name_list.sort()
    for name in name_list:
        try:
            fr=open(FILE,"rb")
            while True:
                l=pickle.load(fr)
                if name==l[0]:
                    pickle.dump(l,fw)
        except FileNotFoundError:
            print(f"--- No records file found for the {Lab_Type.capitalize()} lab. Please add records first. ---")
        except EOFError:
            fr.close()
    fw.close()
    os.remove(FILE)
    os.rename("temp.dat",FILE)
    print("\n--- {Lab_Type.capitalize()} apparatus records sorted by Name. ---")

def check_restock(FILE):
    f=open(FILE,'rb')
    Lab_Type=FILE_TYPE(FILE)
    warnings=0
    print("\n" + "#" * 50)
    print(" " * 18 + "RESTOCK CHECK ({})".format(FILE))
    print("#" * 50)
    try:
        while True:
            l=pickle.load(f)
            if l[2]<l[4]:
                print("!! WARNING !! {} is running out of stock! Only {} {} left (Threshold: {})".format(l[0], l[2], unit(l[1]), l[4]))
                warnings+=1
    except EOFError:
        f.close()
        print("#" * 50)
        if warnings==0:
            print("All apparatus in adequate amounts.")
        else:
            print("{} WARNING(S) found.".format(warnings))
        print("#" * 50 + "\n")


def unit(Type):
    if Type.lower()=="equipment" or Type.lower()=="apparatus" or Type.lower()=="specimen":
        return "Nos."
    elif Type.lower()=="chemical":
        return "Litres"

def password():
    global MISTAKE_COUNT
    Admin_password=open_password_Admin()
    User_password=open_password_User()
    
    print("\n" + "=" * 40)
    print("=" + " " * 14 + "LOGIN SCREEN" + " " * 14 + "=")
    print("=" * 40)
    role=input("Enter Role (ADMIN/USER): ")
    Password_input=input("Enter Password: ")
    if role.lower()=='admin':
        if Password_input==Admin_password:
            print("\n" + "#" * 40)
            print("Signed in as ADMIN successfully!")
            print("#" * 40)
            MISTAKE_COUNT=0
            return "admin"
        else:
            print("\n" + "!" * 40)
            print("Access denied. Invalid Credentials.")
            print("!" * 40)
            MISTAKE_COUNT+=1
            if MISTAKE_COUNT==3:
                print("Too many failed attempts. Waiting 30 seconds.")
                time.sleep(30)
            elif MISTAKE_COUNT>3:
                delay = 30*(MISTAKE_COUNT-3)
                print("Too many failed attempts. Waiting {} seconds.".format(delay))
                time.sleep(delay)
            return 'False'
    if role.lower()=='user':
        if Password_input==User_password:
            print("\n" + "#" * 40)
            print("Signed in as USER successfully!")
            print("#" * 40)
            MISTAKE_COUNT=0
            return "user"
        else:
            print("\n" + "!" * 40)
            print("Access denied. Invalid Credentials.")
            print("!" * 40)
            return 'False'

def change_password():
    global MISTAKE_COUNT
    while True:
        print("\n" + "~" * 40)
        print("~" + " " * 10 + "CHANGE PASSWORD" + " " * 11 + "~")
        print("~" * 40)
        Admin_password=open_password_Admin()
        User_password=open_password_User()
        role=input("Enter Role (ADMIN/USER): ")
        Password_input=input("Enter Old Password: ")
        New_password=input("Enter New Password: ")
        
        if role.lower()=='admin':
            if Password_input==Admin_password:
                if New_password==Admin_password:
                    print("\n!! New password cannot be the old password. !!")
                    continue
                else:
                    save_password_admin(New_password)
                    print("\n--- Admin Password successfully changed! ---")
                    MISTAKE_COUNT=0
                    break
            else:
                print("\n! Access denied. Old Password Incorrect. !")
                MISTAKE_COUNT+=1
                if MISTAKE_COUNT==3:
                    print("Too many failed attempts. Waiting 30 seconds.")
                    time.sleep(30)
                elif MISTAKE_COUNT>3:
                    delay = 30*(MISTAKE_COUNT-3)
                    print("Too many failed attempts. Waiting {} seconds.".format(delay))
                    time.sleep(delay)
                continue
                
        elif role.lower()=='user':
            if Password_input==User_password:
                if New_password==User_password:
                    print("\n!! New password cannot be the old password. !!")
                    continue
                else:
                    save_password_user(New_password)
                    print("\n--- User Password successfully changed! ---")
                    MISTAKE_COUNT=0
                    break
            else:
                print("\n! Access denied. Old Password Incorrect. !")
                MISTAKE_COUNT+=1
                if MISTAKE_COUNT==3:
                    time.sleep(30)
                elif MISTAKE_COUNT>3:
                    delay = 30*(MISTAKE_COUNT-3)
                    print("Too many failed attempts. Waiting {} seconds.".format(delay))
                    time.sleep(delay)
                continue
        else:
             print("\n!! Invalid role. Please enter ADMIN or USER. !!")


def open_password_Admin():
    Admin_pass=open("Adminpassword.txt","r")
    password=Admin_pass.read()
    Admin_pass.close()
    return password

def open_password_User():
    User_pass=open("Userpassword.txt","r")
    password=User_pass.read()
    User_pass.close()
    return password

def save_password_admin(newpassword):
    Admin_pass=open("Adminpassword.txt","w")
    Admin_pass.write(newpassword)
    Admin_pass.close()

def save_password_user(newpassword):
    User_pass=open("Userpassword.txt","w")
    User_pass.write(newpassword)
    User_pass.close()
opening_menu()
main()
